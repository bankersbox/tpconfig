#!/usr/bin/perl -s


%setting = map {(split(/\s*=\s*/, $_, 2))[0..1]} grep !/^#/, split(/\s*[\r\n]+\s*/, {"default", split(/^\s*\[(.*)\]+[\s\r\n]*$/m, load_file("settings.txt"))}->{default});

if ($settings)
{
    use Data::Dumper;
    print Dumper(\%setting);
    exit;
}


if ($show)
{
    my %inventory = load_inventory();
    use Data::Dumper;
    print Dumper(\%inventory);
    exit;
}


if ($generate)
{
    die "usage: $0 -generate IP COUNT" if @ARGV != 2;
    my($ip, $count) = @ARGV;

    my %inventory = load_inventory();

    for (my $i = 0; $i < $count; $i++)
    {
	$ip =~ s/(\d+)$/@{[$1 + 1]}/ while exists $inventory{$ip};
	my $password = 10000000 + int rand 90000000;
	$inventory{$ip} = {ip => $ip, password => $password};
    }

    save_inventory(\%inventory);
    exit;
}


if ($flash)
{
    for (;;)
    {
	my %inventory = load_inventory();

      FACTORY:
	for my $server (split " ", $setting{factory_ips})
	{
	    die if $server !~ /^(?:\d+\.)+\d+$/;

	    print STDERR "LOOKING FOR FACTORY SERVER $server...";

	    my $curl = qq[curl -s --connect-timeout 3 '$server'];
	    print STDERR "$curl\n" if $verbose;
	    my $response = qx[$curl];

	    if (!length($response))
	    {
		print STDERR "NO SERVER";
		next FACTORY;
	    }

	    if ($response !~ /"\.\.\/login\/images\/loginLOGO\.png"/)
	    {
		print STDERR "WRONG RESPONSE";
		next FACTORY;
	    }

	    save_file("data/work1.html", $response);

	    my $step1 = qq[curl -s --user admin:admin --cookie subType=pcSub -F filename=\@sysupgrade.bin 192.168.1.1/incoming/Firmware.htm];
	    my $step2 = qq[curl -s --user admin:admin --cookie subType=pcSub 192.168.1.1/userRpm/FirmwareUpdateTemp.htm];

	    print STDERR "STEP 1...";
	    qx[$step1];
	    print STDERR "STEP 2...";
	    qx[$step2];

	    print STDERR "DONE\n";
	}
	continue
	{
	    if ($loop)
	    {
		sleep 1;
		print STDERR "\r\033[K";
	    }
	    else
	    {
		print STDERR "\n";
	    }
	}

	last if !$loop;
	sleep 1;
    }

    exit;
}


if ($init)
{
    for (;;)
    {
	my %inventory = load_inventory();

	save_file("data/cookie/");

      OPENWRT:
	for my $server (split " ", $setting{openwrt_ips})
	{
	    die if $server !~ /^(?:\d+\.)+\d+$/;

	    print STDERR "LOOKING FOR OPENWRT SERVER $server...";

	    my $stok = load_file("data/stok/$server");
	    my($response);

	    for my $pass (1..2)
	    {
		if ($stok)
		{
		    # assume logged in, and try the request
		    my $curl = qq[curl -s --connect-timeout 3 -b data/cookie/$server '$server/cgi-bin/luci/;stok=$stok/admin/network/iface_status/lan'];
		    print STDERR "$curl\n" if $verbose;
		    $response = qx[$curl];
		    if (!length($response))
		    {
			print STDERR "NO SERVER";
			next OPENWRT;
		    }
		    last if $response !~ /name="password"/;
		}

		last if $pass == 2;

		# if not logged in (e.g., received a login form), log in
		my $curl = qq[curl -s --connect-timeout 3 -c data/cookie/$server $server/cgi-bin/luci -d username=root -d 'password=$setting{default_password}'];
		print STDERR "$curl\n" if $verbose;
		$response = qx[$curl];
		($stok) = $response =~ /<a href="\/cgi-bin\/luci\/;stok=(\w+)\/admin\/system\/">System<\/a>/;
		save_file("data/stok/$server", $stok);

		if (!length($response))
		{
		    print STDERR "NO SERVER";
		    next OPENWRT;
		}

		if ($response =~ /name="password"/)
		{
		    print STDERR "NO ACCESS";
		    next OPENWRT;
		}
	    }

	    save_file("data/work1.html", $response);
	    my($mac) = $response =~ /"macaddr":\s*"(.*?)"/;
	    print STDERR "...stok = $stok  mac = $mac" if $verbose;

	    if (!length($mac))
	    {
		print STDERR "NO MAC";
	    }
	    else
	    {
		my($ip);
		for my $ip0 (sort keys %inventory)
		{
		    if ($inventory{$ip0}{mac} eq $mac)
		    {
			$ip = $ip0;
			last;
		    }
		    $ip = $ip0 if !length($ip) && !length($inventory{$ip0}{mac});
		}

		die if $inventory{ip}{mac} && $inventory{ip}{mac} ne $mac;

		if (!$inventory{$ip}{mac})
		{
		    $inventory{$ip}{mac} = $mac;
		    save_inventory(\%inventory);
		}
		print STDERR " -> $ip...";


		# SET PASSWORD AND SSH KEY
		my(@curl);
		my @F = (
		    "cbi.submit" => "1",
		    "cbid.system._pass.pw1" => $setting{default_password},
		    "cbid.system._pass.pw2" => $setting{default_password},
		    "cbid.dropbear._keys._data" => load_file("../../.ssh/id_rsa.pub"),
		    "cbi.apply" => "Save & Apply",
		    );
		for (my $i = 0; $i < @F; $i += 2)
		{
		    push @curl, "-F", "'$F[$i]=$F[$i + 1]'";
		}
		my $curl = qq[curl -s --max-time 10 -b data/cookie/$server '$server/cgi-bin/luci/;stok=$stok/admin/system/admin/' @curl];
		print STDERR "\n$curl\n" if $verbose;
		my $response = qx[$curl];
		save_file("data/work2.html", $response);

		sleep 2;


		# CONFIG BY SSH

		my $do = "
uci set network.lan.netmask=$setting{netmask}
uci set network.lan.ipaddr=$ip
uci set network.lan.gateway=$setting{gateway}
uci set network.lan.broadcast=$setting{broadcast}
uci set network.lan.dns=$setting{dns}
uci commit
sync
reboot -f
";

		print STDERR "STEP 2...";

		my $ssh = qq[ssh root\@$server -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -n '$do' 2>data/ssh.txt];
		print "$ssh\n" if $verbose;
		my $response = qx[timeout 5 $ssh];
		#print "$response\n";
		print STDERR "REBOOTING\n";
	    }
	}
	continue
	{
	    if ($loop)
	    {
		sleep 1;
		print STDERR "\r\033[K";
	    }
	    else
	    {
		print STDERR "\n";
	    }
	}

	last if !$loop;
	sleep 1;
    }

    exit;
}


sub save_inventory
{
    my($ref) = @_;
    my(@inventory);
    for (values %$ref)
    {
	push @inventory, join("\t", @$_{qw(ip password mac)});
    }
    save_file("inventory.txt", join("\n", sort(@inventory), undef));
}

sub load_inventory
{
    my(%inventory);

    for (split(/\n/, load_file("inventory.txt")))
    {
	my @cell = split(/\t/);
	$inventory{$cell[0]} = {ip => $cell[0], password => $cell[1], mac => $cell[2]};
    }
    return %inventory;
}


### BOILERPLATE ###


sub load_file
{
    my $fn = shift;
    if (open(my $in, $fn))
    {
	local $/ = wantarray? $/: undef;
	<$in>;
    }
}

sub load_pipe
{
    if (open(my $in, "-|", @_))
    {
	local $/ = wantarray? $/: undef;
	<$in>;
    }
}

sub save_file
{
    my $fn = shift;
    if ($fn =~ /^\s*[\>\|]/)
    {
	if (open(my $out, $fn))
	{
	    print $out @_;
	}
    }
    elsif ($fn !~ /\/$/ && open(my $out, ">", $fn))
    {
	print $out @_;
    }
    elsif ((my @path = split(/\//, $fn, -1)))
    {
	mkdir join("/", @path[0..$_]) for 0..$#path - 1;
	if ($path[$#path] && open(my $out, ">", $fn))
	{
	    print $out @_;
	}
    }
}
